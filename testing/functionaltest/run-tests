#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Test runner for the build system. This script should preferably be run
# "directly" and not inside docker

set -o pipefail
set -o errexit

trap _cleanup EXIT
function _cleanup() {
  declare -r -i STATUS=$?
  if [[ ${STATUS} -ne 0 ]]; then
    printf "Error: run-tests status code: %d\n" "${STATUS}"
  fi
  # kokoro has a habit of truncating build logs for scripts, adding a delay
  # seems to help ensure completeness
  if [[ -v KOKORO_ARTIFACTS_DIR ]]; then
    sleep 5s
  fi
  exit ${STATUS}
}

function usage() {
  declare -r exitval="$1"
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
      --sut-name <name>      name of SUT (must match directory name within suts path)
      --fast                 only run a single set of tests per SUT
      --verbose              verbose output
USAGE
  exit "${exitval}"
}

declare -i SHORT_CIRCUIT=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    --sut-name)
      SUT_NAME="$2"
      shift 2
      ;;
    --fast)
      SHORT_CIRCUIT=1
      shift
      ;;
    --verbose)
      set -o xtrace
      shift
      ;;
    -h | --help) usage 0 ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage 1
      ;;
  esac
done

: "${SUT_NAME?"--sut-name flag not specified"}"

SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly SCRIPT_DIR
TOOLS_DIR="${SCRIPT_DIR}"/../../builders/tools
readonly TOOLS_DIR
SUTS_DIR="${SCRIPT_DIR}"/suts
readonly SUTS_DIR
declare -r SUT_DIR="${SUTS_DIR}/${SUT_NAME}"

if ! [[ -d ${SUT_DIR} ]]; then
  printf "SUT directory not found: [%s]\n" "${SUT_DIR}" &>/dev/stderr
  exit 1
fi

declare -a -r TEST_ARGS=(
  "--test_env=TEST_TOOLS_IMAGE=$("${TOOLS_DIR}"/get-builder-image-tagged --image test-tools)"
)
declare -a -r TESTS=(
  "//testing/functionaltest/suts/${SUT_NAME}:grpcurl_test_suite"
)

# If envrionmental variable is set, no local bazel is run.
if ! [[ -v NO_LOCAL_BAZEL ]]; then
  # run the tests using bazel, if installed
  if command bazel --help &>/dev/null; then
    bazel test "${TESTS[@]}" "${TEST_ARGS[@]}"
    if [[ ${SHORT_CIRCUIT} -eq 1 ]]; then
      exit
    fi
  fi
fi

# also run the test suites using bazel-debian container
"${TOOLS_DIR}"/bazel-debian test "${TESTS[@]}" "${TEST_ARGS[@]}"
