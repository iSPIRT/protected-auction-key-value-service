#!/bin/bash
#
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


#######################################
# Generates perfgate run and metrics aggregate data files given a metrics file generated by AB.
# Arguments:
#   $1, Perfgate Benchmark Key, int
#   $2, Perfgate Metric Key to store metric under, str
#   $3, AB metrics file, str
#   $4, Total number of requests performed, int
#######################################
#set -o xtrace
set -o errexit

function usage() {
  local -i STATUS=${1-1}
  cat <<'EOF'
#######################################
# Generates perfgate run and metrics aggregate data files given a metrics file generated by AB.
# Arguments:
#   $1, Perfgate Benchmark Key, int
#   $2, Perfgate Metric Key to store metric under, str
#   $3, ab metrics file, str
#   $4. Total number of requests performed, int
#######################################
EOF
  # shellcheck disable=SC2086
  exit ${STATUS}
}

if [[ $# -lt 4 ]]; then
  printf "Error: Incorrect number of arguments specified\n"
  usage 1
fi

declare -r BENCHMARK_KEY="$1"
declare -r METRIC_KEY="$2"
declare -r METRICS_FILE="$3"
declare -r -i NUM_REQUESTS=$4

declare -r RUN_PROTOBUF="${METRICS_FILE}".runinfo.textproto
declare -r METRICS_AGGREGATE_PROTOBUF="${METRICS_FILE}".aggregate.textproto

#######################################
# Generates Perfgate Run protobuf
#######################################
function generate_run_data_file() {
  cat >"${RUN_PROTOBUF}" <<EOF
# proto-file: google3/third_party/perfgate/proto/quickstore/quickstore.proto
# proto-message: QuickstoreInput
benchmark_key: "${BENCHMARK_KEY}"
EOF
  printf "Generated run protobuf: %s\n" "${RUN_PROTOBUF}"
  cat "${RUN_PROTOBUF}"
}

#######################################
# Extract a metric percentile from the metrics file from Apache ab
#
# Takes the percentile, calculates the row number from the percentile and
# extracts the metrics percentile from the metrics file. 2 is added to the
# percentile as arrays are 1 indexed and the 1st row is headers.
# Arguments:
#   $1, Metric percentile, str
#######################################
function extract_metric_percentile() {
  declare -r -i PERCENTILE=$1
  declare -r -i ROW_NUMBER=$(( PERCENTILE + 2 ))
  sed "s/.*,//; ${ROW_NUMBER}q; d" "${METRICS_FILE}"
}

#######################################
# Generates Metrics Aggregate File
#
# Takes the metrics file generated from Apache ab and generates the metrics
# aggregate protobuf for perfgate.
#######################################
function generate_metrics_aggregate_file() {
  declare MIN
  declare MEDIAN
  declare P_90
  declare P_95
  declare P_99
  declare MAX
  MIN=$(extract_metric_percentile 0)
  MEDIAN=$(extract_metric_percentile 50)
  P_90=$(extract_metric_percentile  90)
  P_95=$(extract_metric_percentile 95)
  P_99=$(extract_metric_percentile 99)
  MAX=$(extract_metric_percentile 100)
  cat >"${METRICS_AGGREGATE_PROTOBUF}" <<EOF
# proto-file: google3/third_party/perfgate/spec/proto/perfgate.proto
# proto-message: Aggregate
metric_aggregate_list: {
  metric_key: "${METRIC_KEY}"
  count: ${NUM_REQUESTS}
  min: ${MIN}
  median: ${MEDIAN}
  # p90
  percentile_list: ${P_90}
  # p95
  percentile_list: ${P_95}
  # p99
  percentile_list: ${P_99}
  max: ${MAX}
}
percentile_milli_rank_list: 90000
percentile_milli_rank_list: 95000
percentile_milli_rank_list: 99000
EOF
  printf "\nGenerated metrics aggregate protobuf: %s\n" "${METRICS_AGGREGATE_PROTOBUF}"
  cat "${METRICS_AGGREGATE_PROTOBUF}"
}

#######################################
# Deletes all files generated from this script
#######################################
function err_cleanup() {
  rm -f "${RUN_PROTOBUF}" "${METRICS_AGGREGATE_PROTOBUF}"
  printf "Deleted %s %s\n" "${RUN_PROTOBUF}" "${METRICS_AGGREGATE_PROTOBUF}"
}
trap err_cleanup ERR

# Generate run data file
# shellcheck disable=SC2086
generate_run_data_file

# Generate metrics data file
generate_metrics_aggregate_file
